---
import AWork from './AWork.astro'

const works = [
  {
    index: 0,
    title: 'Title 1',
    slug: 'title-1',
    date: 'Jan 2024',
    desc: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.',
    url: '#'
  },
  {
    index: 1,
    title: 'Title 2',
    slug: 'title-2',
    date: 'Feb 2024',
    desc: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.',
    url: '#'
  },
  {
    index: 2,
    title: 'Title 3',
    slug: 'title-3',
    date: 'Mar 2024',
    desc: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.',
    url: '#'
  },
  {
    index: 3,
    title: 'Title 4',
    slug: 'title-4',
    date: 'Apr 2024',
    desc: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.',
    url: '#'
  },
  {
    index: 4,
    title: 'Title 5',
    slug: 'title-5',
    date: 'May 2024',
    desc: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.',
    url: '#'
  }
]
---

<section class="s-work" id="work" data-intersect>
  <div class="s__container">
    <header class="s__head">
      <div class="s__title">
        <div class="s__title__inner">
          <h2>
            <span>My</span> <span>BeaatsLoops</span>
          </h2>
        </div>
      </div><!-- .s__title -->

      <div class="s__desc">
        <div class="s__desc__inner">
          <p>
            Here are some of my BeaatsLoops.
          </p>
        </div>
      </div><!-- .s__desc -->
    </header><!-- .s__head -->

    <div class="s__works js-works">
      {
        works.map((work) => (
          <AWork
            class={`s__work s__work--${work.index + 1} js-work`}
            title={work.title}
            slug={work.slug}
            date={work.date}
            url={work.url}
            desc={work.desc}
            index={work.index}
          />
        ))
      }
    </div><!-- .s__works -->
  </div><!-- .s__container -->
</section>

<script>
  import Emitter from '../utils/Emitter'
  import Ticker from '../utils/Ticker'

  import { gsap } from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'

  class Section {
    el: HTMLElement
    works: NodeListOf<HTMLElement>
    tl: GSAPTimeline

    bounding: DOMRect
    isPaused: boolean

    /**
     * Constructor
     */
    constructor() {
      // Elements
      this.el = document.querySelector('.s-work')
      this.works = this.el.querySelectorAll('.js-work')
      this.tl = null

      // Properties
      this.bounding = null
      this.isPaused = true

      // Init
      Ticker.nextTick(this.init, this)
    }

    /**
     * Init
     */
    init() {
      if (this.el) {
        this.bounding = this.el.getBoundingClientRect()

        this.createTimeline()
        this.bindEvents()
      }
    }

    /**
     * Bind events
     */
    bindEvents() {
      this.el.addEventListener('intersect', this.onIntersect.bind(this), {
        passive: true,
      })

      Emitter.on('resize', this.onResize, this)
    }

    /**
     * Intersect handler
     */
    onIntersect(e) {
      this.isPaused = !e.detail.isIntersecting
    }

    /**
     * Resize handler
     */
    onResize(widthChanged) {
      if (this.tl) {
        this.tl.kill()
      }

      if (widthChanged) {
        this.bounding = this.el.getBoundingClientRect()
      }

      this.createTimeline()
    }

    /**
     * Create timeline
     */
    createTimeline() {
      if (window.safeWidth < 768) return

      const { bounding, works } = this

      this.tl = gsap.timeline({
        scrollTrigger: {
          trigger: this.el,
          pin: false,
          scrub: 0.5,
          start: 'top top',
          end: '+=' + (bounding.height * 2),
        },
      })

      this.tl.to(this.el, {
        duration: 1,
      })

      works.forEach((work, index) => {
        const media = work.querySelector('.a__media')
        const video = media.querySelector('video')

        if (video) {
          video.currentTime = 0

          this.tl.call(
            () => {
              video.play()
            },
            null,
            index * 0.25
          )
        }

        this.tl.to(
          work,
          {
            opacity: 1,
            scale: 1,
            duration: 0.25,
          },
          index * 0.25
        )

        if (works.length > index + 1) {
          this.tl.to(
            work,
            {
              opacity: 0.05,
              scale: 0.85,
              duration: 0.25,
            },
            index * 0.25 + 0.25
          )
        }
      })
    }
  }

  new Section()
</script>

<style lang="scss">
  .s-work {
    position: relative;
    z-index: 3;

    padding: 6rem 0;
    min-height: 100vh;

    background: color(primary);

    @include mq(phone) {
      padding: 4rem 0;
      min-height: 0;
    }

    .s__container {
      @include flex(column, flex-start, center);

      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      height: 100%;
    }

    .s__head {
      @include flex(row, stretch, center);

      margin-bottom: 4rem;
      width: 100%;
      max-width: 1200px;

      @include mq(phone) {
        @include flex(column, flex-start, center);

        margin-bottom: 2rem;
      }

      .s__title,
      .s__desc {
        flex: 1 1 auto;
        width: 50%;

        @include mq(phone) {
          width: 100%;
        }
      }

      .s__title {
        padding-right: 3rem;

        @include mq(phone) {
          margin-bottom: 1.5rem;
          padding-right: 0;
        }

        &__inner {
          max-width: 520px;
          margin: 0 auto 0 0;
          padding: 0 1rem;

          @include mq(phone) {
            padding: 0 1.5rem;
          }
        }

        h2 {
          @include flex(column, flex-start, flex-start);

          margin: 0;

          font: 700 4.5rem/1 font-family(bigger);
          text-transform: uppercase;

          @include mq(phone) {
            font-size: 3rem;
          }

          span {
            display: block;
          }
        }
      }

      .s__desc {
        padding-left: 3rem;

        border-left: 1px solid color(secondary);

        @include mq(phone) {
          padding-left: 0;

          border-left: 0;
        }

        &__inner {
          max-width: 520px;
          margin: 0 0 0 auto;
          padding: 0 1rem;

          @include mq(phone) {
            margin: 0;
            padding: 0 1.5rem;
          }
        }

        p {
          margin: 0;

          font: 700 1.5rem/1.5 font-family(fraktion);
        }
      }
    }

    .s__works {
      position: relative;

      width: 100%;
      height: 100%;

      .s__work {
        position: relative;
        z-index: 1;

        width: 100%;

        opacity: 0.05;
        transform: scale(0.85);

        &--1 {
          z-index: 5;

          opacity: 1;
          transform: none;
        }

        @include mq(phone) {
          margin-bottom: 3rem;

          opacity: 1 !important;
          transform: none !important;

          &:last-child {
            margin-bottom: 0;
          }
        }
      }
    }
  }
</style>